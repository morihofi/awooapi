package net.fuxle.awooapi;

import net.fuxle.awooapi.common.plugin.AwooPluginManager;
import net.fuxle.awooapi.core.autodiscovery.ClassDiscovery;
import net.fuxle.awooapi.core.exceptions.NotInitializedException;
import net.fuxle.awooapi.server.common.Router;
import net.fuxle.awooapi.server.intf.WebServer;
import net.fuxle.awooapi.utilities.internals.AwooPluginManagerWrapper;
import net.fuxle.awooapi.utilities.internals.ClassloaderUtil;
import net.fuxle.awooapi.utilities.internals.helper.AppDirectoryHelper;
import net.fuxle.awooapi.utilities.internals.helper.MavenHelper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.lang.invoke.MethodHandles;
import java.nio.file.Path;

public class AwooApplication {
    private final WebServer webServer;
    private final Logger log = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());
    private final RuntimeConfiguration configuration;
    private final ClassLoader callingClassLoader;
    private final AwooPluginManagerWrapper pluginManagerWrapper = new AwooPluginManagerWrapper(this);
    private boolean hasInitialized = false;


    private ClassDiscovery discovery;

    public AwooApplication(WebServer serverInstance, RuntimeConfiguration configuration) {
        this.webServer = serverInstance;
        this.configuration = configuration;

        this.callingClassLoader = ClassloaderUtil.getCallingClassLoader();
    }

    public void initialize() throws Exception {
        log.info("Starting endpoint scan in classpath on package \"{}\" ...", configuration.getSearchConfig().getPackagePrefix());
        discovery = new ClassDiscovery(configuration, webServer);
        discovery.discoverAndLoadClasses();
        hasInitialized = true;

        log.info("AwooApplication has been initialized");
    }

    public void dumpGraphQlSchema(Path targetLocation) throws IOException, NotInitializedException {
        if (!hasInitialized) {
            throw new NotInitializedException("Application has not been initialized. Call initialize() on this instance before.");
        }
        log.info("Dumping GraphQL schema ...");
        discovery.dumpGraphQlSchema(targetLocation);
        log.info("GraphQL schema dump completed");
    }

    public void dumpGraphQlSchema() throws IOException, NotInitializedException {
        Path target = AppDirectoryHelper.getAppDirectoryUsingClassLoader(callingClassLoader);

        if (target == null) {
            throw new IllegalStateException("Target GraphQL saving path cannot be null. Please provide the target location using a parameter");
        }

        // Maven workaround to find folder where the pom.xml lives
        target = MavenHelper.findMavenProjectRoot(target);

        dumpGraphQlSchema(target.resolve(".autogenerated-schema.gql"));
    }

    public void start() throws Exception {
        if (!hasInitialized) {
            throw new NotInitializedException("Application has not been initialized. Call initialize() on this instance before.");
        }
        log.info("Starting WebServer ...");
        webServer.start();
    }

    public void start(int httpPort) throws Exception {
        webServer.getWebServerConfig().setHttpPort(httpPort);
        start();
    }

    public void stop() throws Exception {
        webServer.stop();
    }

    public Router getRouter() {
        return webServer.getRouter();
    }

    public WebServer getWebServer() {
        return webServer;
    }

    public AwooPluginManager getPluginManager() {
        return pluginManagerWrapper.getPluginManager();
    }
}
