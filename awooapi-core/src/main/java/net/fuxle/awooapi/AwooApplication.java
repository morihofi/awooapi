package net.fuxle.awooapi;

import net.fuxle.awooapi.autodiscovery.ClassDiscoveryException;
import net.fuxle.awooapi.autodiscovery.EndpointClassDiscovery;
import net.fuxle.awooapi.exceptions.NotInitializedException;
import net.fuxle.awooapi.server.intf.Handler;
import net.fuxle.awooapi.server.intf.Router;
import net.fuxle.awooapi.server.intf.StaticFileServing;
import net.fuxle.awooapi.server.intf.WebServer;
import net.fuxle.awooapi.utilities.internals.ClassloaderUtil;
import net.fuxle.awooapi.utilities.internals.helper.AppDirectoryHelper;
import net.fuxle.awooapi.utilities.internals.helper.MavenHelper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.lang.invoke.MethodHandles;
import java.lang.reflect.InvocationTargetException;
import java.nio.file.Path;

public class AwooApplication {
    private final WebServer serverInstance;
    private final Logger log = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());
    private final RuntimeConfiguration configuration;
    private final ClassLoader callingClassLoader;
    private boolean hasInitialized = false;
    private EndpointClassDiscovery discovery;

    public AwooApplication(WebServer serverInstance, RuntimeConfiguration configuration) {
        this.serverInstance = serverInstance;
        this.configuration = configuration;

        this.callingClassLoader = ClassloaderUtil.getCallingClassLoader();
    }

    public void initialize() throws IOException, ClassDiscoveryException, InvocationTargetException, NoSuchMethodException, InstantiationException, IllegalAccessException {
        log.info("Starting endpoint scan in classpath on package \"{}\" ...", configuration.getSearchPackagePrefix());
        discovery = new EndpointClassDiscovery(configuration, callingClassLoader);
        discovery.discoverAndLoadClasses(serverInstance, configuration.getApiPrefix());
        hasInitialized = true;
        log.info("Endpoint scan completed");
    }

    public void dumpGraphQlSchema(Path targetLocation) throws IOException, InvocationTargetException, NoSuchMethodException, InstantiationException, IllegalAccessException, NotInitializedException {
        if (!hasInitialized) {
            throw new NotInitializedException("Application has not been initialized. Call initialize() on this instance before.");
        }
        log.info("Dumping GraphQL schema ...");
        discovery.dumpGqlSchema(targetLocation);
        log.info("GraphQL schema dump completed");
    }

    public void dumpGraphQlSchema() throws IOException, InvocationTargetException, NoSuchMethodException, InstantiationException, IllegalAccessException, NotInitializedException {
        Path target = AppDirectoryHelper.getAppDirectoryUsingClassLoader(callingClassLoader);

        if (target == null) {
            throw new IllegalStateException("Target GraphQL saving path cannot be null. Please provide the target location using a parameter");
        }

        // Maven workaround to find folder where the pom.xml lives
        target = MavenHelper.findMavenProjectRoot(target);


        dumpGraphQlSchema(target.resolve(".autogenerated-schema.gql"));
    }

    public void start(int port) throws Exception {
        if (!hasInitialized) {
            throw new NotInitializedException("Application has not been initialized. Call initialize() on this instance before.");
        }
        log.info("Starting WebServer ...");
        serverInstance.start(port);
    }

    public void stop() throws Exception {
        serverInstance.stop();
    }

    public void setBeforeRequestHandler(Handler beforeRequestHandler) {
        serverInstance.setBeforeRequestHandler(beforeRequestHandler);
    }

    public void setAfterRequestHandler(Handler afterRequestHandler) {
        serverInstance.setAfterRequestHandler(afterRequestHandler);
    }

    public Router getRouter() {
        return serverInstance.getRouter();
    }

    public void setStaticFileServing(StaticFileServing staticFileServing) {
        serverInstance.setStaticFileServing(staticFileServing);
    }
}
